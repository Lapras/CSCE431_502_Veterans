# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/admin/users', type: :request do
  let(:admin) { User.create!(full_name: 'Admin', email: 'admin@example.com', uid: 'a1') }

  let(:valid_attributes) do
    { full_name: 'New Person', email: 'new@example.com', uid: 'u1', avatar_url: '' }
  end

  let(:invalid_attributes) do
    { full_name: '', email: '', uid: '' }
  end

  before do
    admin.add_role(:admin)
    sign_in admin
  end

  describe 'GET /index' do
    context 'with_admin' do
      it 'renders a successful response' do
        User.create!(full_name: 'X', email: 'x@example.com', uid: 'x1')
        get admin_users_url
        expect(response).to be_successful
      end
    
      context 'without_admin' do
        before do
          admin.remove_role(:admin)
          admin.add_role(:member)
        it 'redirects to not a member' do
          get admin_users_url
          expect(flash[:alert]).to eq("You must be an administrator to perform this action.")
      end
    
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      user = User.create!(full_name: 'X', email: 'x@example.com', uid: 'x1')
      get admin_user_url(user)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_admin_user_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      user = User.create!(full_name: 'X', email: 'x@example.com', uid: 'x1')
      get edit_admin_user_url(user)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new User' do
        expect do
          post admin_users_url, params: { user: valid_attributes.merge(role_names: %w[member]) }
        end.to change(User, :count).by(1)
      end

      it 'redirects to the created user' do
        post admin_users_url, params: { user: valid_attributes }
        expect(response).to redirect_to(admin_user_url(User.last))
      end
    end

    context 'none roles' do
      it 'creates a new User' do
        expect do
          post admin_users_url, params: { user: valid_attributes }
        end.to change(User, :count).by(1)
      end

      it 'creates a user with no roles' do
        post admin_users_url, params: { user: valid_attributes }

        user = User.last
        expect(user.roles).to be_empty
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new User' do
        expect do
          post admin_users_url, params: { user: invalid_attributes }
        end.not_to change(User, :count)
      end

      it 'renders 422' do
        post admin_users_url, params: { user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    it 'updates and redirects' do
      user = User.create!(email: 'old@example.com', full_name: 'Old', uid: '123', avatar_url: '')
      patch admin_user_url(user), params: {
        user: {
          email: 'new@example.com'
        }
      }

      expect(response).to redirect_to([:admin, user])
      expect(user.reload.email).to eq('new@example.com')
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys and redirects' do
      user = User.create!(full_name: 'X', email: 'x2@example.com', uid: 'x2')
      expect do
        delete admin_user_url(user)
      end.to change(User, :count).by(-1)
      expect(response).to redirect_to(admin_users_url)
    end
  end
end
